# openapi
swagger: "2.0"
info:
  description: "IDE代码模板插件服务端，提供模板上传和下载等功能"
  version: "1.0.0"
  title: "DogCoder Server"
  # termsOfService: "http://swagger.io/terms/"
  # contact:
  #   email: "example@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "dogcoder.yuanzhy.com"
basePath: "/api/v1"
tags:
- name: "template"
  description: "模板"
- name: "user"
  description: "Operations about user"
schemes:
- "http"
# - "https"
paths:
  /template:
    post:
      tags:
      - "template"
      summary: "添加一个新的模板"
      description: ""
      operationId: "addTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "模板对象"
        required: true
        schema:
          $ref: "#/definitions/Template"
      responses:
        "400":
          description: "Invalid Parameters"
        "401":
          description: "Invalid Authentication"
      security:
      - dogcoder_auth:
        - "write:template"
        - "read:template"
    put:
      tags:
      - "template"
      summary: "更新一个已存在的模板"
      description: ""
      operationId: "updateTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "模板对象"
        required: true
        schema:
          $ref: "#/definitions/Template"
      responses:
        "400":
          description: "Invalid type and name supplied"
        "401":
          description: "Invalid Authentication"
        "404":
          description: "Template not found"
      security:
      - dogcoder_auth:
        - "write:template"
        - "read:template"
    get:
      tags:
      - "template"
      summary: "获取模板列表"
      description: ""
      operationId: "getTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "lastUpdatedTime"
        in: "query"
        description: "最后更新时间戳"
        required: false
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Template"
  /template/{type}/{name}:
    get:
      tags:
      - "template"
      summary: "通过语言和名称获取一个模板"
      description: "Returns a single Template"
      operationId: "getOneTemplate"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "语言"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "模板名称"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Template"
        "400":
          description: "Invalid type or name supplied"
        "404":
          description: "Template not found"
      security:
      - api_key: []
    delete:
      tags:
      - "template"
      summary: "删除一个模板"
      description: ""
      operationId: "deleteTemplate"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "type"
        in: "path"
        description: "语言"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "模板名称"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid type or name supplied"
        "404":
          description: "Template not found"
      security:
      - dogcoder_auth:
        - "write:template"
        - "read:template"
  /user/login:
    post:
      tags:
      - "user"
      summary: "登录"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "退出"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  dogcoder_auth:
    type: "oauth2"
    authorizationUrl: "http://dogcoder.yuanzhy.com/api/v1/auth"
    flow: "implicit"
    scopes:
      write:template: "modify template in your account"
      read:template: "read your template"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Template:
    type: "object"
    required:
    - "type"
    - "name"
    - "prefix"
    - "content"
    properties:
      type:
        type: "string"
        description: "语言类别"
        enum:
        - "java"
        - "javascript"
        - "kotlin"
        - "go"
        - "python"
        - "yaml"
      name:
        type: "string"
        description: "每个类别必须唯一"
      prefix:
        type: "string"
        description: "代码提示的前缀，深色显示并会和输入的关键字联动高亮"
      suffix:
        type: "string"
        description: "代码提示的后缀，浅色显示"
      desc:
        type: "string"
        format: "模板描述"
      labels:
        type: "array"
        description: "标签，会参与搜索但不会再任何地方显示"
        items:
          type: "string"
      imports:
        type: "array"
        description: "导包，java和kotlin为字符串数组，go为{import, alias}，python为{from, import, as}"
        items:
          type: "object"
      content:
        type: "string"
  # User:
  #   type: "object"
  #   properties:
  #     id:
  #       type: "integer"
  #       format: "int64"
  #     username:
  #       type: "string"
  #     firstName:
  #       type: "string"
  #     lastName:
  #       type: "string"
  #     email:
  #       type: "string"
  #     password:
  #       type: "string"
  #     phone:
  #       type: "string"
  #     userStatus:
  #       type: "integer"
  #       format: "int32"
  #       description: "User Status"
  #   xml:
  #     name: "User"
# externalDocs:
#   description: "Find out more about Swagger"
#   url: "http://swagger.io"